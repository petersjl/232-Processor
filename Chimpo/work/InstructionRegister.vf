////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2013 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 14.7
//  \   \         Application : sch2hdl
//  /   /         Filename : InstructionRegister.vf
// /___/   /\     Timestamp : 02/23/2020 18:01:18
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: sch2hdl -sympath C:/Users/yeltonwh/ClassWork/CSSE232/1920b-csse232-lakempca-petersjl-stapler-yeltonwh/Chimpo/ipcore_dir -intstyle ise -family spartan3e -verilog C:/Users/yeltonwh/ClassWork/CSSE232/1920b-csse232-lakempca-petersjl-stapler-yeltonwh/Chimpo/work/InstructionRegister.vf -w C:/Users/yeltonwh/ClassWork/CSSE232/1920b-csse232-lakempca-petersjl-stapler-yeltonwh/Chimpo/InstructionRegister.sch
//Design Name: InstructionRegister
//Device: spartan3e
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale 1ns / 1ps

module FD16CE_MXILINX_InstructionRegister(C, 
                                          CE, 
                                          CLR, 
                                          D, 
                                          Q);

    input C;
    input CE;
    input CLR;
    input [15:0] D;
   output [15:0] Q;
   
   
   FDCE #( .INIT(1'b0) ) I_Q0 (.C(C), 
              .CE(CE), 
              .CLR(CLR), 
              .D(D[0]), 
              .Q(Q[0]));
   FDCE #( .INIT(1'b0) ) I_Q1 (.C(C), 
              .CE(CE), 
              .CLR(CLR), 
              .D(D[1]), 
              .Q(Q[1]));
   FDCE #( .INIT(1'b0) ) I_Q2 (.C(C), 
              .CE(CE), 
              .CLR(CLR), 
              .D(D[2]), 
              .Q(Q[2]));
   FDCE #( .INIT(1'b0) ) I_Q3 (.C(C), 
              .CE(CE), 
              .CLR(CLR), 
              .D(D[3]), 
              .Q(Q[3]));
   FDCE #( .INIT(1'b0) ) I_Q4 (.C(C), 
              .CE(CE), 
              .CLR(CLR), 
              .D(D[4]), 
              .Q(Q[4]));
   FDCE #( .INIT(1'b0) ) I_Q5 (.C(C), 
              .CE(CE), 
              .CLR(CLR), 
              .D(D[5]), 
              .Q(Q[5]));
   FDCE #( .INIT(1'b0) ) I_Q6 (.C(C), 
              .CE(CE), 
              .CLR(CLR), 
              .D(D[6]), 
              .Q(Q[6]));
   FDCE #( .INIT(1'b0) ) I_Q7 (.C(C), 
              .CE(CE), 
              .CLR(CLR), 
              .D(D[7]), 
              .Q(Q[7]));
   FDCE #( .INIT(1'b0) ) I_Q8 (.C(C), 
              .CE(CE), 
              .CLR(CLR), 
              .D(D[8]), 
              .Q(Q[8]));
   FDCE #( .INIT(1'b0) ) I_Q9 (.C(C), 
              .CE(CE), 
              .CLR(CLR), 
              .D(D[9]), 
              .Q(Q[9]));
   FDCE #( .INIT(1'b0) ) I_Q10 (.C(C), 
               .CE(CE), 
               .CLR(CLR), 
               .D(D[10]), 
               .Q(Q[10]));
   FDCE #( .INIT(1'b0) ) I_Q11 (.C(C), 
               .CE(CE), 
               .CLR(CLR), 
               .D(D[11]), 
               .Q(Q[11]));
   FDCE #( .INIT(1'b0) ) I_Q12 (.C(C), 
               .CE(CE), 
               .CLR(CLR), 
               .D(D[12]), 
               .Q(Q[12]));
   FDCE #( .INIT(1'b0) ) I_Q13 (.C(C), 
               .CE(CE), 
               .CLR(CLR), 
               .D(D[13]), 
               .Q(Q[13]));
   FDCE #( .INIT(1'b0) ) I_Q14 (.C(C), 
               .CE(CE), 
               .CLR(CLR), 
               .D(D[14]), 
               .Q(Q[14]));
   FDCE #( .INIT(1'b0) ) I_Q15 (.C(C), 
               .CE(CE), 
               .CLR(CLR), 
               .D(D[15]), 
               .Q(Q[15]));
endmodule
`timescale 1ns / 1ps

module reg16_MUSER_InstructionRegister(CLK, 
                                       I, 
                                       Write, 
                                       O);

    input CLK;
    input [15:0] I;
    input Write;
   output [15:0] O;
   
   wire XLXN_1;
   
   (* HU_SET = "XLXI_2_37" *) 
   FD16CE_MXILINX_InstructionRegister  XLXI_2 (.C(CLK), 
                                              .CE(Write), 
                                              .CLR(XLXN_1), 
                                              .D(I[15:0]), 
                                              .Q(O[15:0]));
   GND  XLXI_3 (.G(XLXN_1));
endmodule
`timescale 1ns / 1ps

module InstructionRegister(CLK, 
                           DataIn, 
                           InstWrite, 
                           CLRA, 
                           CLRB, 
                           DataOut, 
                           Imm, 
                           MoveA, 
                           MoveB, 
                           Op, 
                           Rd, 
                           Rm);

    input CLK;
    input [15:0] DataIn;
    input InstWrite;
   output CLRA;
   output CLRB;
   output [15:0] DataOut;
   output [7:0] Imm;
   output MoveA;
   output MoveB;
   output [3:0] Op;
   output [3:0] Rd;
   output [3:0] Rm;
   
   wire [15:0] DataOut_DUMMY;
   
   assign DataOut[15:0] = DataOut_DUMMY[15:0];
   reg16_MUSER_InstructionRegister  XLXI_1 (.CLK(CLK), 
                                           .I(DataIn[15:0]), 
                                           .Write(InstWrite), 
                                           .O(DataOut_DUMMY[15:0]));
   BUF  XLXI_2 (.I(DataOut_DUMMY[0]), 
               .O(CLRB));
   BUF  XLXI_4 (.I(DataOut_DUMMY[1]), 
               .O(CLRA));
   BUF  XLXI_6 (.I(DataOut_DUMMY[2]), 
               .O(MoveB));
   BUF  XLXI_7 (.I(DataOut_DUMMY[3]), 
               .O(MoveA));
   BUF  XLXI_8 (.I(DataOut_DUMMY[15]), 
               .O(Op[3]));
   BUF  XLXI_10 (.I(DataOut_DUMMY[14]), 
                .O(Op[2]));
   BUF  XLXI_11 (.I(DataOut_DUMMY[13]), 
                .O(Op[1]));
   BUF  XLXI_12 (.I(DataOut_DUMMY[12]), 
                .O(Op[0]));
   BUF  XLXI_13 (.I(DataOut_DUMMY[8]), 
                .O(Rd[0]));
   BUF  XLXI_14 (.I(DataOut_DUMMY[9]), 
                .O(Rd[1]));
   BUF  XLXI_15 (.I(DataOut_DUMMY[10]), 
                .O(Rd[2]));
   BUF  XLXI_16 (.I(DataOut_DUMMY[11]), 
                .O(Rd[3]));
   BUF  XLXI_17 (.I(DataOut_DUMMY[4]), 
                .O(Rm[0]));
   BUF  XLXI_18 (.I(DataOut_DUMMY[5]), 
                .O(Rm[1]));
   BUF  XLXI_20 (.I(DataOut_DUMMY[7]), 
                .O(Rm[3]));
   BUF  XLXI_21 (.I(DataOut_DUMMY[6]), 
                .O(Rm[2]));
   BUF  XLXI_22 (.I(DataOut_DUMMY[0]), 
                .O(Imm[0]));
   BUF  XLXI_23 (.I(DataOut_DUMMY[1]), 
                .O(Imm[1]));
   BUF  XLXI_24 (.I(DataOut_DUMMY[2]), 
                .O(Imm[2]));
   BUF  XLXI_25 (.I(DataOut_DUMMY[3]), 
                .O(Imm[3]));
   BUF  XLXI_26 (.I(DataOut_DUMMY[4]), 
                .O(Imm[4]));
   BUF  XLXI_27 (.I(DataOut_DUMMY[5]), 
                .O(Imm[5]));
   BUF  XLXI_28 (.I(DataOut_DUMMY[6]), 
                .O(Imm[6]));
   BUF  XLXI_29 (.I(DataOut_DUMMY[7]), 
                .O(Imm[7]));
endmodule
